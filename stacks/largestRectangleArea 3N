class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack <Integer> st  = new Stack<>();
        int max = Integer.MIN_VALUE;
        int n = heights.length;
        int [] nsr = new int [n];
        int [] nsl = new int [n];
        for (int i = 0 ; i < n; i++){
            while (!st.isEmpty() && heights[st.peek()] >= heights[i]){
                st.pop();
            }
            nsl[i] = (st.isEmpty()) ? 0 : st.peek() + 1;
            st.push(i);
        }
        for (int i = 0 ; i < n; ++i){
            System.out.print(nsl[i] +" ");
        }
        while(!st.isEmpty()) st.pop();
        
        for (int i = n-1; i >= 0; i--){
            while (!st.isEmpty() && heights[st.peek()] >= heights[i]){
                st.pop();
            }
            nsr[i] = (st.isEmpty()) ? n-1 : st.peek() - 1;
            st.push(i);

        }
        for (int i = 0 ; i < n; ++i){
            System.out.print(nsr[i] +" ");
        }
        for (int i = 0 ; i < n; ++i){
            max = Math.max((nsr[i] - nsl[i] + 1) * heights[i], max);
        }return max;
        
    }
}
