/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseList(ListNode head){
        ListNode cur = head;
        ListNode right , prev = null;
        while(cur != null){
            right = cur.next;
            cur.next= prev;
            prev = cur;
            cur = right;
        }
        return prev;


    }
    public ListNode mergeList(ListNode l1, ListNode l2){
        ListNode temp = new ListNode(0);
        ListNode res = temp;
        while(l1 != null && l2 != null){
            
                temp = l1;
                l1 = l1.next;
                temp.next = l2;
    
            
                temp = l2;
                l2 = l2.next;
                temp.next = l1;
            
        }
        temp.next = (l1 == null) ? l2 : l1;
        return res.next;
    }
    public void reorderList(ListNode head) {
        ListNode cur = head;
        ListNode slow = head;
        ListNode fast = head;
        ListNode prev = null;
        if (cur != null && cur.next != null){
           
        
            while(fast != null && fast.next != null){
                prev = slow;
                slow = slow.next;
                fast = fast.next.next;
            }
            ListNode l2  = reverseList(slow);
            prev.next = null;

            ListNode ans= mergeList(cur,l2);

        
        }

    }
}
