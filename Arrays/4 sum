class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int  n = nums.length;
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        for(int i = 0; i < n-2; ++i){// to  traverse length till n -2 
            if(i > 0 && nums[i] == nums[i-1]) continue;// need to check the duplicates for the i , i.e start of the triplets
            for(int j = i + 1; j < n - 1;j++){
                if(j > i+1 && nums[j] == nums[j-1]) continue;
                int l = j + 1;
                int r = n - 1;
                while(l < r){
                    // 1. sum == 0
                Long curTotal = ( 1l *(nums[i]) + ( 1l * nums[l]) + ( 1l * nums[r]) + ( 1l * nums[j]));
                    if(curTotal == 1L*target) {
                    res.add(Arrays.asList( (nums[i]) , (nums[l]) , (nums[r]), nums[j]));
                    // 2. going to check for next triplets
                    while (l < r && nums[l] == nums[l+1]) l++; //while checking for next triplets with same i eliminate duplicates
                    while (l < r && nums[r] == nums[r-1]) r--; //from the l and r 
                    // ++l;
                }
                // 3. sum < 0
                // now next l and r  may be < or > o then move the pointer according to it.
                if  ( curTotal < Long.valueOf(target)) l++;
                else r--;
                }

            }
        }
        return res;
    
    }
}
