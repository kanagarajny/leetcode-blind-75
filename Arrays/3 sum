
//a[i] + a[j] + a[k] == 0 i!=j , j!=k, k!=i

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int  n = nums.length;
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        for(int i = 0; i < n-2; ++i){// to  traverse length till n -2 
            if(i > 0 && nums[i] == nums[i-1]) continue;// need to check the duplicates for the i , i.e start of the triplets
            int l = i + 1, r = n - 1;
            while(l < r){
                // 1. sum == 0
                if(nums[i] + nums[l] + nums[r] == 0) {
                   res.add(Arrays.asList( (nums[i]) , (nums[l]) , (nums[r])));
                // 2. going to check for next triplets
               while (l < r && nums[l] == nums[l+1]) l++; //while checking for next triplets with same i eliminate duplicates
               while (l < r && nums[r] == nums[r-1]) r--; //from the l and r 
                }
               // 3. sum < 0
               // now next l and r  may be < or > o then move the pointer according to it.
               if  (nums[i] + nums[l] + nums[r] < 0) l++;
               else r--;


            }
        }
        return res;
    }
}
