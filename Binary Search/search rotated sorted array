class Solution {
    public int search(int[] nums, int target) {
        int l = 0;
        int r = nums.length - 1;
        while(l <= r){
            int mid = l + (r-l) / 2;
            if(nums[mid] == target) return mid;
            if(nums[l] <= nums[mid]){   // <= is needed  when we have two number as input where our l == mid [3,1] t=1;
                //left side is sorted
                if(nums[l] <= target  && target  < nums [mid] ){
                    //target present in the left half
                    r = mid - 1;
                }
                //target  not present in the left sorted half move to right
                    else{
                        l = mid + 1;
                    }
            }
            else {
                //right side is sorted 
                if(nums[mid] < target && target <= nums [r]){
                    //target present in the right half 
                    l =  mid + 1;
                }
                else {r = mid - 1;}

            }
        } return -1;
    }
}
